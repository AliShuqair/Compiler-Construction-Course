# Programming Language Concepts

## Syntax

The Syntax is the grammer of the programming language. It describes the 
different structures such as expressions, statements, and blocks. 

The Syntax is formally described using a Context Free Grammar(CFG), which is a 
set of staic algorithms and frameworks.


## Semantics

The Semantics describe or gives the Syntax structure a meaning. It
is more complex and difficult to describe precisely unlike syntax.
For example, the meaning of the "if/else" statement must be programmed correctly
by the implementer so that the compiler generates the correct code.

Unfortunately, there is no clear formal to describe Semantics analysis unlike
Syntax. However, there is a framework called Syntax Directed Translation(SDT)
which is used to express the semantic analysis. 


## The whole process

Code -> Scanner(Lexical Structure) -> Tokens -> Syntax analyzer -> Object Code

the Scanner takes the statements and analyzes them, creating tokens,
Then the Sytnax analyzer takes the tokens and tries to create Syntax structures.
If a group of tokens creates a valid expression, it moves to the next set of
tokens.


For example, lets look at this small segment of code:

'''
if(x!=10 ){
n++;
}
'''

the tokens in this code would be "if","(","x","!=",")","{","n","++",";","}" .
This is very important for parsing.

after the Scanner tokenizes the statement in the above section ,
the Syntax analyzer first checks:

> if(x!=0)

if it is correct, then it checks

> n++;

if it is correct, then it checks the whole statement to see if the whole
if statement is correct. 
 
## Paradgims of Programming Languages

There are 4 paradgims of programing languages

1. Imperative or Procedural(Function) Languages. This is also called Von-Neuman model of computing which is based on Single Processor Sequential
Excecution of instructions. 
