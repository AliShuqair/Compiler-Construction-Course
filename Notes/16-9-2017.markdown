# Programming Language Concepts

## Syntax

The Syntax is the grammer of the programming language. It describes the 
different structures such as expressions, statements, and blocks. 

The Syntax is formally described using a Context Free Grammar(CFG), which is a 
set of staic algorithms and frameworks.


## Semantics

The Semantics describe or gives the Syntax structure a meaning. It
is more complex and difficult to describe precisely unlike syntax.
For example, the meaning of the "if/else" statement must be programmed correctly
by the implementer so that the compiler generates the correct code.

Unfortunately, there is no clear formal to describe Semantics analysis unlike
Syntax. However, there is a framework called Syntax Directed Translation(SDT)
which is used to express the semantic analysis. 


## The whole process

Code -> Scanner(Lexical Structure) -> Tokens -> Syntax analyzer -> Object Code

the Scanner takes the statements and analyzes them, creating tokens,
Then the Sytnax analyzer takes the tokens and tries to create Syntax structures.
If a group of tokens creates a valid expression, it moves to the next set of
tokens.


For example, lets look at this small segment of code:

```C

if(x!=10 ){

n++;

}

```

the tokens in this code would be "if","(","x","!=",")","{","n","++",";","}" .
This is very important for parsing.

after the Scanner tokenizes the statement in the above section ,
the Syntax analyzer first checks:

> if(x!=0)

if it is correct, then it checks

> n++;

if it is correct, then it checks the whole statement to see if the whole
if statement is correct. 
 
## Paradgims of Programming Languages

There are 4 paradgims of programing languages

###  Imperative or Procedural Paradigm

This is also called Von-Neuman model of computing which is based on Single Processor Sequential
Excecution of instructions. A programming Language that is based on this model is characterized by:

1. Sequential Excecution of Instructions.

2. Using Variables to Represent Memory Locations.

3. Using Assignment Statements to Change the Value of a Variable.

An example of a programming language designed with this paradigm is Pascal. This is an example function in pascal(Greatest Common Divisior):

```Pascal
function gcd(x,y:integer):integer; //int gcd(int x, int y)
Begin
        if(x = y) then//notice that its not ==
                gcd:=x
        else
                if(x > y) then
                        gcd:=gcd(x-y,y)
                else
                        gcd:=gcd(x,y-x);
End
```

### Functional Paradigm 

Computation is based on the evaluation or calling functions or application of functions. That is why the language is sometimes called
applicated language. A programming Language that is based on this model is characterized by:


1. There is **NO** Notion of Variables or Assignment Statements in this Paradigm. 

2. Repetition is not Expressed in Loops, but is Acheived by Recursive Calls.

As an example, lets take the LISP (**LIS**t **P**rogramming) language.

In LISP, everything is a list. In LISP, a list is defined as:

> A List is a Sequence of Things Seperated by Blanks and Surrounded by Paranthesis.

An example of lists

```LISP

(+ a b)
``` 

or

```LISP

(+ 2 3)

````

or

```LISP

(if a b c)

```

which means "if a is true, then the value is b. otherwise , the value is c".

Lets write a small program in LISP:

```LISP

>(define f(x)
(+ x 1))
>f
>(f 3)
>4
```

This outputs 4. 

or another program:

```LISP
>(define ff(x y)
(+ x y))
>ff
>(ff 3 5)
>5
```

This outputs 5.



